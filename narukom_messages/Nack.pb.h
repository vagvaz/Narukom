// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nack.proto

#ifndef PROTOBUF_Nack_2eproto__INCLUDED
#define PROTOBUF_Nack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Nack_2eproto();
void protobuf_AssignDesc_Nack_2eproto();
void protobuf_ShutdownFile_Nack_2eproto();

class NackMessage;
class IgnoreMessage;

// ===================================================================

class NackMessage : public ::google::protobuf::Message {
 public:
  NackMessage();
  virtual ~NackMessage();
  
  NackMessage(const NackMessage& from);
  
  inline NackMessage& operator=(const NackMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NackMessage& default_instance();
  
  void Swap(NackMessage* other);
  
  // implements Message ----------------------------------------------
  
  NackMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NackMessage& from);
  void MergeFrom(const NackMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string receiver = 1;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  inline const ::std::string& receiver() const;
  inline void set_receiver(const ::std::string& value);
  inline void set_receiver(const char* value);
  inline void set_receiver(const char* value, size_t size);
  inline ::std::string* mutable_receiver();
  
  // required uint32 message_num = 7;
  inline bool has_message_num() const;
  inline void clear_message_num();
  static const int kMessageNumFieldNumber = 7;
  inline ::google::protobuf::uint32 message_num() const;
  inline void set_message_num(::google::protobuf::uint32 value);
  
  // repeated uint32 missing_packets = 8;
  inline int missing_packets_size() const;
  inline void clear_missing_packets();
  static const int kMissingPacketsFieldNumber = 8;
  inline ::google::protobuf::uint32 missing_packets(int index) const;
  inline void set_missing_packets(int index, ::google::protobuf::uint32 value);
  inline void add_missing_packets(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      missing_packets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_missing_packets();
  
  // @@protoc_insertion_point(class_scope:NackMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* receiver_;
  static const ::std::string _default_receiver_;
  ::google::protobuf::uint32 message_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > missing_packets_;
  friend void  protobuf_AddDesc_Nack_2eproto();
  friend void protobuf_AssignDesc_Nack_2eproto();
  friend void protobuf_ShutdownFile_Nack_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NackMessage* default_instance_;
};
// -------------------------------------------------------------------

class IgnoreMessage : public ::google::protobuf::Message {
 public:
  IgnoreMessage();
  virtual ~IgnoreMessage();
  
  IgnoreMessage(const IgnoreMessage& from);
  
  inline IgnoreMessage& operator=(const IgnoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IgnoreMessage& default_instance();
  
  void Swap(IgnoreMessage* other);
  
  // implements Message ----------------------------------------------
  
  IgnoreMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IgnoreMessage& from);
  void MergeFrom(const IgnoreMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 message_num = 1;
  inline bool has_message_num() const;
  inline void clear_message_num();
  static const int kMessageNumFieldNumber = 1;
  inline ::google::protobuf::uint32 message_num() const;
  inline void set_message_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:IgnoreMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 message_num_;
  friend void  protobuf_AddDesc_Nack_2eproto();
  friend void protobuf_AssignDesc_Nack_2eproto();
  friend void protobuf_ShutdownFile_Nack_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static IgnoreMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// NackMessage

// required string receiver = 1;
inline bool NackMessage::has_receiver() const {
  return _has_bit(0);
}
inline void NackMessage::clear_receiver() {
  if (receiver_ != &_default_receiver_) {
    receiver_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& NackMessage::receiver() const {
  return *receiver_;
}
inline void NackMessage::set_receiver(const ::std::string& value) {
  _set_bit(0);
  if (receiver_ == &_default_receiver_) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
}
inline void NackMessage::set_receiver(const char* value) {
  _set_bit(0);
  if (receiver_ == &_default_receiver_) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
}
inline void NackMessage::set_receiver(const char* value, size_t size) {
  _set_bit(0);
  if (receiver_ == &_default_receiver_) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NackMessage::mutable_receiver() {
  _set_bit(0);
  if (receiver_ == &_default_receiver_) {
    receiver_ = new ::std::string;
  }
  return receiver_;
}

// required uint32 message_num = 7;
inline bool NackMessage::has_message_num() const {
  return _has_bit(1);
}
inline void NackMessage::clear_message_num() {
  message_num_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 NackMessage::message_num() const {
  return message_num_;
}
inline void NackMessage::set_message_num(::google::protobuf::uint32 value) {
  _set_bit(1);
  message_num_ = value;
}

// repeated uint32 missing_packets = 8;
inline int NackMessage::missing_packets_size() const {
  return missing_packets_.size();
}
inline void NackMessage::clear_missing_packets() {
  missing_packets_.Clear();
}
inline ::google::protobuf::uint32 NackMessage::missing_packets(int index) const {
  return missing_packets_.Get(index);
}
inline void NackMessage::set_missing_packets(int index, ::google::protobuf::uint32 value) {
  missing_packets_.Set(index, value);
}
inline void NackMessage::add_missing_packets(::google::protobuf::uint32 value) {
  missing_packets_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NackMessage::missing_packets() const {
  return missing_packets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NackMessage::mutable_missing_packets() {
  return &missing_packets_;
}

// -------------------------------------------------------------------

// IgnoreMessage

// required uint32 message_num = 1;
inline bool IgnoreMessage::has_message_num() const {
  return _has_bit(0);
}
inline void IgnoreMessage::clear_message_num() {
  message_num_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 IgnoreMessage::message_num() const {
  return message_num_;
}
inline void IgnoreMessage::set_message_num(::google::protobuf::uint32 value) {
  _set_bit(0);
  message_num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Nack_2eproto__INCLUDED
