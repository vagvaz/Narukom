// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Nack.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NackMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NackMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* IgnoreMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IgnoreMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Nack_2eproto() {
  protobuf_AddDesc_Nack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Nack.proto");
  GOOGLE_CHECK(file != NULL);
  NackMessage_descriptor_ = file->message_type(0);
  static const int NackMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NackMessage, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NackMessage, message_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NackMessage, missing_packets_),
  };
  NackMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NackMessage_descriptor_,
      NackMessage::default_instance_,
      NackMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NackMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NackMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NackMessage));
  IgnoreMessage_descriptor_ = file->message_type(1);
  static const int IgnoreMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IgnoreMessage, message_num_),
  };
  IgnoreMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IgnoreMessage_descriptor_,
      IgnoreMessage::default_instance_,
      IgnoreMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IgnoreMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IgnoreMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IgnoreMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Nack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NackMessage_descriptor_, &NackMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IgnoreMessage_descriptor_, &IgnoreMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Nack_2eproto() {
  delete NackMessage::default_instance_;
  delete NackMessage_reflection_;
  delete IgnoreMessage::default_instance_;
  delete IgnoreMessage_reflection_;
}

void protobuf_AddDesc_Nack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nNack.proto\"M\n\013NackMessage\022\020\n\010receiver\030"
    "\001 \002(\t\022\023\n\013message_num\030\007 \002(\r\022\027\n\017missing_pa"
    "ckets\030\010 \003(\r\"$\n\rIgnoreMessage\022\023\n\013message_"
    "num\030\001 \002(\r", 129);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Nack.proto", &protobuf_RegisterTypes);
  NackMessage::default_instance_ = new NackMessage();
  IgnoreMessage::default_instance_ = new IgnoreMessage();
  NackMessage::default_instance_->InitAsDefaultInstance();
  IgnoreMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Nack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Nack_2eproto {
  StaticDescriptorInitializer_Nack_2eproto() {
    protobuf_AddDesc_Nack_2eproto();
  }
} static_descriptor_initializer_Nack_2eproto_;


// ===================================================================

const ::std::string NackMessage::_default_receiver_;
#ifndef _MSC_VER
const int NackMessage::kReceiverFieldNumber;
const int NackMessage::kMessageNumFieldNumber;
const int NackMessage::kMissingPacketsFieldNumber;
#endif  // !_MSC_VER

NackMessage::NackMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NackMessage::InitAsDefaultInstance() {
}

NackMessage::NackMessage(const NackMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NackMessage::SharedCtor() {
  _cached_size_ = 0;
  receiver_ = const_cast< ::std::string*>(&_default_receiver_);
  message_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NackMessage::~NackMessage() {
  SharedDtor();
}

void NackMessage::SharedDtor() {
  if (receiver_ != &_default_receiver_) {
    delete receiver_;
  }
  if (this != default_instance_) {
  }
}

void NackMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NackMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NackMessage_descriptor_;
}

const NackMessage& NackMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Nack_2eproto();  return *default_instance_;
}

NackMessage* NackMessage::default_instance_ = NULL;

NackMessage* NackMessage::New() const {
  return new NackMessage;
}

void NackMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (receiver_ != &_default_receiver_) {
        receiver_->clear();
      }
    }
    message_num_ = 0u;
  }
  missing_packets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NackMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string receiver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver().data(), this->receiver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_message_num;
        break;
      }
      
      // required uint32 message_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_num_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_missing_packets;
        break;
      }
      
      // repeated uint32 missing_packets = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missing_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_missing_packets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_missing_packets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_missing_packets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NackMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string receiver = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->receiver(), output);
  }
  
  // required uint32 message_num = 7;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->message_num(), output);
  }
  
  // repeated uint32 missing_packets = 8;
  for (int i = 0; i < this->missing_packets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->missing_packets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NackMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string receiver = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->receiver(), target);
  }
  
  // required uint32 message_num = 7;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->message_num(), target);
  }
  
  // repeated uint32 missing_packets = 8;
  for (int i = 0; i < this->missing_packets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->missing_packets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NackMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string receiver = 1;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver());
    }
    
    // required uint32 message_num = 7;
    if (has_message_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_num());
    }
    
  }
  // repeated uint32 missing_packets = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->missing_packets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->missing_packets(i));
    }
    total_size += 1 * this->missing_packets_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NackMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NackMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NackMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NackMessage::MergeFrom(const NackMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  missing_packets_.MergeFrom(from.missing_packets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_receiver(from.receiver());
    }
    if (from._has_bit(1)) {
      set_message_num(from.message_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NackMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NackMessage::CopyFrom(const NackMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NackMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void NackMessage::Swap(NackMessage* other) {
  if (other != this) {
    std::swap(receiver_, other->receiver_);
    std::swap(message_num_, other->message_num_);
    missing_packets_.Swap(&other->missing_packets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NackMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NackMessage_descriptor_;
  metadata.reflection = NackMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IgnoreMessage::kMessageNumFieldNumber;
#endif  // !_MSC_VER

IgnoreMessage::IgnoreMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IgnoreMessage::InitAsDefaultInstance() {
}

IgnoreMessage::IgnoreMessage(const IgnoreMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IgnoreMessage::SharedCtor() {
  _cached_size_ = 0;
  message_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IgnoreMessage::~IgnoreMessage() {
  SharedDtor();
}

void IgnoreMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IgnoreMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IgnoreMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IgnoreMessage_descriptor_;
}

const IgnoreMessage& IgnoreMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Nack_2eproto();  return *default_instance_;
}

IgnoreMessage* IgnoreMessage::default_instance_ = NULL;

IgnoreMessage* IgnoreMessage::New() const {
  return new IgnoreMessage;
}

void IgnoreMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IgnoreMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_num_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IgnoreMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 message_num = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IgnoreMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 message_num = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IgnoreMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 message_num = 1;
    if (has_message_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IgnoreMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IgnoreMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IgnoreMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IgnoreMessage::MergeFrom(const IgnoreMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_message_num(from.message_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IgnoreMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IgnoreMessage::CopyFrom(const IgnoreMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IgnoreMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IgnoreMessage::Swap(IgnoreMessage* other) {
  if (other != this) {
    std::swap(message_num_, other->message_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IgnoreMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IgnoreMessage_descriptor_;
  metadata.reflection = IgnoreMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
