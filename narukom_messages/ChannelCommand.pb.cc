// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChannelCommand.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CommandOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChannelCommand_2eproto() {
  protobuf_AddDesc_ChannelCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChannelCommand.proto");
  GOOGLE_CHECK(file != NULL);
  CommandOption_descriptor_ = file->message_type(0);
  static const int CommandOption_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandOption, option_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandOption, option_value_),
  };
  CommandOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandOption_descriptor_,
      CommandOption::default_instance_,
      CommandOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandOption));
  ChannelCommand_descriptor_ = file->message_type(1);
  static const int ChannelCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCommand, command_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCommand, command_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCommand, options_),
  };
  ChannelCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelCommand_descriptor_,
      ChannelCommand::default_instance_,
      ChannelCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChannelCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandOption_descriptor_, &CommandOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelCommand_descriptor_, &ChannelCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChannelCommand_2eproto() {
  delete CommandOption::default_instance_;
  delete CommandOption_reflection_;
  delete ChannelCommand::default_instance_;
  delete ChannelCommand_reflection_;
}

void protobuf_AddDesc_ChannelCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ChannelCommand.proto\">\n\rCommandOption\022"
    "\025\n\013option_name\030\001 \002(\t:\000\022\026\n\014option_value\030\002"
    " \002(\t:\000\"c\n\016ChannelCommand\022\026\n\014command_type"
    "\030\001 \002(\t:\000\022\030\n\016command_action\030\002 \002(\t:\000\022\037\n\007op"
    "tions\030\003 \003(\0132\016.CommandOption", 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChannelCommand.proto", &protobuf_RegisterTypes);
  CommandOption::default_instance_ = new CommandOption();
  ChannelCommand::default_instance_ = new ChannelCommand();
  CommandOption::default_instance_->InitAsDefaultInstance();
  ChannelCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChannelCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChannelCommand_2eproto {
  StaticDescriptorInitializer_ChannelCommand_2eproto() {
    protobuf_AddDesc_ChannelCommand_2eproto();
  }
} static_descriptor_initializer_ChannelCommand_2eproto_;


// ===================================================================

const ::std::string CommandOption::_default_option_name_;
const ::std::string CommandOption::_default_option_value_;
#ifndef _MSC_VER
const int CommandOption::kOptionNameFieldNumber;
const int CommandOption::kOptionValueFieldNumber;
#endif  // !_MSC_VER

CommandOption::CommandOption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandOption::InitAsDefaultInstance() {
}

CommandOption::CommandOption(const CommandOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandOption::SharedCtor() {
  _cached_size_ = 0;
  option_name_ = const_cast< ::std::string*>(&_default_option_name_);
  option_value_ = const_cast< ::std::string*>(&_default_option_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandOption::~CommandOption() {
  SharedDtor();
}

void CommandOption::SharedDtor() {
  if (option_name_ != &_default_option_name_) {
    delete option_name_;
  }
  if (option_value_ != &_default_option_value_) {
    delete option_value_;
  }
  if (this != default_instance_) {
  }
}

void CommandOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandOption_descriptor_;
}

const CommandOption& CommandOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelCommand_2eproto();  return *default_instance_;
}

CommandOption* CommandOption::default_instance_ = NULL;

CommandOption* CommandOption::New() const {
  return new CommandOption;
}

void CommandOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (option_name_ != &_default_option_name_) {
        option_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (option_value_ != &_default_option_value_) {
        option_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string option_name = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_option_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->option_name().data(), this->option_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_option_value;
        break;
      }
      
      // required string option_value = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_option_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_option_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->option_value().data(), this->option_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string option_name = 1 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->option_name().data(), this->option_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->option_name(), output);
  }
  
  // required string option_value = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->option_value().data(), this->option_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->option_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string option_name = 1 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->option_name().data(), this->option_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->option_name(), target);
  }
  
  // required string option_value = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->option_value().data(), this->option_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->option_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandOption::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string option_name = 1 [default = ""];
    if (has_option_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->option_name());
    }
    
    // required string option_value = 2 [default = ""];
    if (has_option_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->option_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandOption::MergeFrom(const CommandOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_option_name(from.option_name());
    }
    if (from._has_bit(1)) {
      set_option_value(from.option_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandOption::CopyFrom(const CommandOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CommandOption::Swap(CommandOption* other) {
  if (other != this) {
    std::swap(option_name_, other->option_name_);
    std::swap(option_value_, other->option_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandOption_descriptor_;
  metadata.reflection = CommandOption_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ChannelCommand::_default_command_type_;
const ::std::string ChannelCommand::_default_command_action_;
#ifndef _MSC_VER
const int ChannelCommand::kCommandTypeFieldNumber;
const int ChannelCommand::kCommandActionFieldNumber;
const int ChannelCommand::kOptionsFieldNumber;
#endif  // !_MSC_VER

ChannelCommand::ChannelCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChannelCommand::InitAsDefaultInstance() {
}

ChannelCommand::ChannelCommand(const ChannelCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChannelCommand::SharedCtor() {
  _cached_size_ = 0;
  command_type_ = const_cast< ::std::string*>(&_default_command_type_);
  command_action_ = const_cast< ::std::string*>(&_default_command_action_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelCommand::~ChannelCommand() {
  SharedDtor();
}

void ChannelCommand::SharedDtor() {
  if (command_type_ != &_default_command_type_) {
    delete command_type_;
  }
  if (command_action_ != &_default_command_action_) {
    delete command_action_;
  }
  if (this != default_instance_) {
  }
}

void ChannelCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelCommand_descriptor_;
}

const ChannelCommand& ChannelCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelCommand_2eproto();  return *default_instance_;
}

ChannelCommand* ChannelCommand::default_instance_ = NULL;

ChannelCommand* ChannelCommand::New() const {
  return new ChannelCommand;
}

void ChannelCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (command_type_ != &_default_command_type_) {
        command_type_->clear();
      }
    }
    if (_has_bit(1)) {
      if (command_action_ != &_default_command_action_) {
        command_action_->clear();
      }
    }
  }
  options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command_type = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command_type().data(), this->command_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command_action;
        break;
      }
      
      // required string command_action = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command_action().data(), this->command_action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }
      
      // repeated .CommandOption options = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_options;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChannelCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command_type = 1 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_type().data(), this->command_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command_type(), output);
  }
  
  // required string command_action = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_action().data(), this->command_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command_action(), output);
  }
  
  // repeated .CommandOption options = 3;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->options(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChannelCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command_type = 1 [default = ""];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_type().data(), this->command_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command_type(), target);
  }
  
  // required string command_action = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_action().data(), this->command_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command_action(), target);
  }
  
  // repeated .CommandOption options = 3;
  for (int i = 0; i < this->options_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->options(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChannelCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command_type = 1 [default = ""];
    if (has_command_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_type());
    }
    
    // required string command_action = 2 [default = ""];
    if (has_command_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_action());
    }
    
  }
  // repeated .CommandOption options = 3;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->options(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelCommand::MergeFrom(const ChannelCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  options_.MergeFrom(from.options_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command_type(from.command_type());
    }
    if (from._has_bit(1)) {
      set_command_action(from.command_action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelCommand::CopyFrom(const ChannelCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < options_size(); i++) {
    if (!this->options(i).IsInitialized()) return false;
  }
  return true;
}

void ChannelCommand::Swap(ChannelCommand* other) {
  if (other != this) {
    std::swap(command_type_, other->command_type_);
    std::swap(command_action_, other->command_action_);
    options_.Swap(&other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelCommand_descriptor_;
  metadata.reflection = ChannelCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
