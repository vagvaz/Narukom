// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChannelCommand.proto

#ifndef PROTOBUF_ChannelCommand_2eproto__INCLUDED
#define PROTOBUF_ChannelCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChannelCommand_2eproto();
void protobuf_AssignDesc_ChannelCommand_2eproto();
void protobuf_ShutdownFile_ChannelCommand_2eproto();

class CommandOption;
class ChannelCommand;

// ===================================================================

class CommandOption : public ::google::protobuf::Message {
 public:
  CommandOption();
  virtual ~CommandOption();
  
  CommandOption(const CommandOption& from);
  
  inline CommandOption& operator=(const CommandOption& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandOption& default_instance();
  
  void Swap(CommandOption* other);
  
  // implements Message ----------------------------------------------
  
  CommandOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandOption& from);
  void MergeFrom(const CommandOption& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string option_name = 1 [default = ""];
  inline bool has_option_name() const;
  inline void clear_option_name();
  static const int kOptionNameFieldNumber = 1;
  inline const ::std::string& option_name() const;
  inline void set_option_name(const ::std::string& value);
  inline void set_option_name(const char* value);
  inline void set_option_name(const char* value, size_t size);
  inline ::std::string* mutable_option_name();
  
  // required string option_value = 2 [default = ""];
  inline bool has_option_value() const;
  inline void clear_option_value();
  static const int kOptionValueFieldNumber = 2;
  inline const ::std::string& option_value() const;
  inline void set_option_value(const ::std::string& value);
  inline void set_option_value(const char* value);
  inline void set_option_value(const char* value, size_t size);
  inline ::std::string* mutable_option_value();
  
  // @@protoc_insertion_point(class_scope:CommandOption)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* option_name_;
  static const ::std::string _default_option_name_;
  ::std::string* option_value_;
  static const ::std::string _default_option_value_;
  friend void  protobuf_AddDesc_ChannelCommand_2eproto();
  friend void protobuf_AssignDesc_ChannelCommand_2eproto();
  friend void protobuf_ShutdownFile_ChannelCommand_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CommandOption* default_instance_;
};
// -------------------------------------------------------------------

class ChannelCommand : public ::google::protobuf::Message {
 public:
  ChannelCommand();
  virtual ~ChannelCommand();
  
  ChannelCommand(const ChannelCommand& from);
  
  inline ChannelCommand& operator=(const ChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelCommand& default_instance();
  
  void Swap(ChannelCommand* other);
  
  // implements Message ----------------------------------------------
  
  ChannelCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelCommand& from);
  void MergeFrom(const ChannelCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string command_type = 1 [default = ""];
  inline bool has_command_type() const;
  inline void clear_command_type();
  static const int kCommandTypeFieldNumber = 1;
  inline const ::std::string& command_type() const;
  inline void set_command_type(const ::std::string& value);
  inline void set_command_type(const char* value);
  inline void set_command_type(const char* value, size_t size);
  inline ::std::string* mutable_command_type();
  
  // required string command_action = 2 [default = ""];
  inline bool has_command_action() const;
  inline void clear_command_action();
  static const int kCommandActionFieldNumber = 2;
  inline const ::std::string& command_action() const;
  inline void set_command_action(const ::std::string& value);
  inline void set_command_action(const char* value);
  inline void set_command_action(const char* value, size_t size);
  inline ::std::string* mutable_command_action();
  
  // repeated .CommandOption options = 3;
  inline int options_size() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 3;
  inline const ::CommandOption& options(int index) const;
  inline ::CommandOption* mutable_options(int index);
  inline ::CommandOption* add_options();
  inline const ::google::protobuf::RepeatedPtrField< ::CommandOption >&
      options() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommandOption >*
      mutable_options();
  
  // @@protoc_insertion_point(class_scope:ChannelCommand)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* command_type_;
  static const ::std::string _default_command_type_;
  ::std::string* command_action_;
  static const ::std::string _default_command_action_;
  ::google::protobuf::RepeatedPtrField< ::CommandOption > options_;
  friend void  protobuf_AddDesc_ChannelCommand_2eproto();
  friend void protobuf_AssignDesc_ChannelCommand_2eproto();
  friend void protobuf_ShutdownFile_ChannelCommand_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ChannelCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// CommandOption

// required string option_name = 1 [default = ""];
inline bool CommandOption::has_option_name() const {
  return _has_bit(0);
}
inline void CommandOption::clear_option_name() {
  if (option_name_ != &_default_option_name_) {
    option_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CommandOption::option_name() const {
  return *option_name_;
}
inline void CommandOption::set_option_name(const ::std::string& value) {
  _set_bit(0);
  if (option_name_ == &_default_option_name_) {
    option_name_ = new ::std::string;
  }
  option_name_->assign(value);
}
inline void CommandOption::set_option_name(const char* value) {
  _set_bit(0);
  if (option_name_ == &_default_option_name_) {
    option_name_ = new ::std::string;
  }
  option_name_->assign(value);
}
inline void CommandOption::set_option_name(const char* value, size_t size) {
  _set_bit(0);
  if (option_name_ == &_default_option_name_) {
    option_name_ = new ::std::string;
  }
  option_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandOption::mutable_option_name() {
  _set_bit(0);
  if (option_name_ == &_default_option_name_) {
    option_name_ = new ::std::string;
  }
  return option_name_;
}

// required string option_value = 2 [default = ""];
inline bool CommandOption::has_option_value() const {
  return _has_bit(1);
}
inline void CommandOption::clear_option_value() {
  if (option_value_ != &_default_option_value_) {
    option_value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CommandOption::option_value() const {
  return *option_value_;
}
inline void CommandOption::set_option_value(const ::std::string& value) {
  _set_bit(1);
  if (option_value_ == &_default_option_value_) {
    option_value_ = new ::std::string;
  }
  option_value_->assign(value);
}
inline void CommandOption::set_option_value(const char* value) {
  _set_bit(1);
  if (option_value_ == &_default_option_value_) {
    option_value_ = new ::std::string;
  }
  option_value_->assign(value);
}
inline void CommandOption::set_option_value(const char* value, size_t size) {
  _set_bit(1);
  if (option_value_ == &_default_option_value_) {
    option_value_ = new ::std::string;
  }
  option_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandOption::mutable_option_value() {
  _set_bit(1);
  if (option_value_ == &_default_option_value_) {
    option_value_ = new ::std::string;
  }
  return option_value_;
}

// -------------------------------------------------------------------

// ChannelCommand

// required string command_type = 1 [default = ""];
inline bool ChannelCommand::has_command_type() const {
  return _has_bit(0);
}
inline void ChannelCommand::clear_command_type() {
  if (command_type_ != &_default_command_type_) {
    command_type_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ChannelCommand::command_type() const {
  return *command_type_;
}
inline void ChannelCommand::set_command_type(const ::std::string& value) {
  _set_bit(0);
  if (command_type_ == &_default_command_type_) {
    command_type_ = new ::std::string;
  }
  command_type_->assign(value);
}
inline void ChannelCommand::set_command_type(const char* value) {
  _set_bit(0);
  if (command_type_ == &_default_command_type_) {
    command_type_ = new ::std::string;
  }
  command_type_->assign(value);
}
inline void ChannelCommand::set_command_type(const char* value, size_t size) {
  _set_bit(0);
  if (command_type_ == &_default_command_type_) {
    command_type_ = new ::std::string;
  }
  command_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChannelCommand::mutable_command_type() {
  _set_bit(0);
  if (command_type_ == &_default_command_type_) {
    command_type_ = new ::std::string;
  }
  return command_type_;
}

// required string command_action = 2 [default = ""];
inline bool ChannelCommand::has_command_action() const {
  return _has_bit(1);
}
inline void ChannelCommand::clear_command_action() {
  if (command_action_ != &_default_command_action_) {
    command_action_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ChannelCommand::command_action() const {
  return *command_action_;
}
inline void ChannelCommand::set_command_action(const ::std::string& value) {
  _set_bit(1);
  if (command_action_ == &_default_command_action_) {
    command_action_ = new ::std::string;
  }
  command_action_->assign(value);
}
inline void ChannelCommand::set_command_action(const char* value) {
  _set_bit(1);
  if (command_action_ == &_default_command_action_) {
    command_action_ = new ::std::string;
  }
  command_action_->assign(value);
}
inline void ChannelCommand::set_command_action(const char* value, size_t size) {
  _set_bit(1);
  if (command_action_ == &_default_command_action_) {
    command_action_ = new ::std::string;
  }
  command_action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChannelCommand::mutable_command_action() {
  _set_bit(1);
  if (command_action_ == &_default_command_action_) {
    command_action_ = new ::std::string;
  }
  return command_action_;
}

// repeated .CommandOption options = 3;
inline int ChannelCommand::options_size() const {
  return options_.size();
}
inline void ChannelCommand::clear_options() {
  options_.Clear();
}
inline const ::CommandOption& ChannelCommand::options(int index) const {
  return options_.Get(index);
}
inline ::CommandOption* ChannelCommand::mutable_options(int index) {
  return options_.Mutable(index);
}
inline ::CommandOption* ChannelCommand::add_options() {
  return options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommandOption >&
ChannelCommand::options() const {
  return options_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommandOption >*
ChannelCommand::mutable_options() {
  return &options_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChannelCommand_2eproto__INCLUDED
