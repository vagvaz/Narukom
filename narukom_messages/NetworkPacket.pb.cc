// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetworkPacket.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NetworkHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NetworkPacket_2eproto() {
  protobuf_AddDesc_NetworkPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NetworkPacket.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkHeader_descriptor_ = file->message_type(0);
  static const int NetworkHeader_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, message_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, packet_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, number_of_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, timeout_),
  };
  NetworkHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkHeader_descriptor_,
      NetworkHeader::default_instance_,
      NetworkHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkHeader));
  NetworkPacket_descriptor_ = file->message_type(1);
  static const int NetworkPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPacket, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPacket, byte_buffer_),
  };
  NetworkPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkPacket_descriptor_,
      NetworkPacket::default_instance_,
      NetworkPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NetworkPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkHeader_descriptor_, &NetworkHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkPacket_descriptor_, &NetworkPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NetworkPacket_2eproto() {
  delete NetworkHeader::default_instance_;
  delete NetworkHeader_reflection_;
  delete NetworkPacket::default_instance_;
  delete NetworkPacket_reflection_;
}

void protobuf_AddDesc_NetworkPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Envelope_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023NetworkPacket.proto\032\016Envelope.proto\"\303\001"
    "\n\rNetworkHeader\022\023\n\013message_num\030\001 \002(\r\022\025\n\n"
    "packet_num\030\002 \002(\r:\0011\022\034\n\021number_of_packets"
    "\030\003 \002(\r:\0011\022\014\n\004type\030\004 \002(\t\022\021\n\tpublisher\030\005 \002"
    "(\t\022\014\n\004host\030\006 \002(\t\022\r\n\005topic\030\007 \002(\t\022\023\n\ttimes"
    "tamp\030\010 \002(\t:\000\022\025\n\007timeout\030\t \002(\r:\0041000\"O\n\rN"
    "etworkPacket\022\036\n\006header\030\001 \002(\0132\016.NetworkHe"
    "ader\022\036\n\013byte_buffer\030\002 \002(\0132\t.RawBytes", 316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetworkPacket.proto", &protobuf_RegisterTypes);
  NetworkHeader::default_instance_ = new NetworkHeader();
  NetworkPacket::default_instance_ = new NetworkPacket();
  NetworkHeader::default_instance_->InitAsDefaultInstance();
  NetworkPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetworkPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetworkPacket_2eproto {
  StaticDescriptorInitializer_NetworkPacket_2eproto() {
    protobuf_AddDesc_NetworkPacket_2eproto();
  }
} static_descriptor_initializer_NetworkPacket_2eproto_;


// ===================================================================

const ::std::string NetworkHeader::_default_type_;
const ::std::string NetworkHeader::_default_publisher_;
const ::std::string NetworkHeader::_default_host_;
const ::std::string NetworkHeader::_default_topic_;
const ::std::string NetworkHeader::_default_timestamp_;
#ifndef _MSC_VER
const int NetworkHeader::kMessageNumFieldNumber;
const int NetworkHeader::kPacketNumFieldNumber;
const int NetworkHeader::kNumberOfPacketsFieldNumber;
const int NetworkHeader::kTypeFieldNumber;
const int NetworkHeader::kPublisherFieldNumber;
const int NetworkHeader::kHostFieldNumber;
const int NetworkHeader::kTopicFieldNumber;
const int NetworkHeader::kTimestampFieldNumber;
const int NetworkHeader::kTimeoutFieldNumber;
#endif  // !_MSC_VER

NetworkHeader::NetworkHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkHeader::InitAsDefaultInstance() {
}

NetworkHeader::NetworkHeader(const NetworkHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkHeader::SharedCtor() {
  _cached_size_ = 0;
  message_num_ = 0u;
  packet_num_ = 1u;
  number_of_packets_ = 1u;
  type_ = const_cast< ::std::string*>(&_default_type_);
  publisher_ = const_cast< ::std::string*>(&_default_publisher_);
  host_ = const_cast< ::std::string*>(&_default_host_);
  topic_ = const_cast< ::std::string*>(&_default_topic_);
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  timeout_ = 1000u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkHeader::~NetworkHeader() {
  SharedDtor();
}

void NetworkHeader::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (publisher_ != &_default_publisher_) {
    delete publisher_;
  }
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (topic_ != &_default_topic_) {
    delete topic_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void NetworkHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkHeader_descriptor_;
}

const NetworkHeader& NetworkHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetworkPacket_2eproto();  return *default_instance_;
}

NetworkHeader* NetworkHeader::default_instance_ = NULL;

NetworkHeader* NetworkHeader::New() const {
  return new NetworkHeader;
}

void NetworkHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_num_ = 0u;
    packet_num_ = 1u;
    number_of_packets_ = 1u;
    if (_has_bit(3)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    if (_has_bit(4)) {
      if (publisher_ != &_default_publisher_) {
        publisher_->clear();
      }
    }
    if (_has_bit(5)) {
      if (host_ != &_default_host_) {
        host_->clear();
      }
    }
    if (_has_bit(6)) {
      if (topic_ != &_default_topic_) {
        topic_->clear();
      }
    }
    if (_has_bit(7)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timeout_ = 1000u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_num_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packet_num;
        break;
      }
      
      // required uint32 packet_num = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_num_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number_of_packets;
        break;
      }
      
      // required uint32 number_of_packets = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_packets_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }
      
      // required string type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_publisher;
        break;
      }
      
      // required string publisher = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // required string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_topic;
        break;
      }
      
      // required string topic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 8 [default = ""];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }
      
      // required uint32 timeout = 9 [default = 1000];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 message_num = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_num(), output);
  }
  
  // required uint32 packet_num = 2 [default = 1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->packet_num(), output);
  }
  
  // required uint32 number_of_packets = 3 [default = 1];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number_of_packets(), output);
  }
  
  // required string type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }
  
  // required string publisher = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->publisher(), output);
  }
  
  // required string host = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // required string topic = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->topic(), output);
  }
  
  // required string timestamp = 8 [default = ""];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->timestamp(), output);
  }
  
  // required uint32 timeout = 9 [default = 1000];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 message_num = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_num(), target);
  }
  
  // required uint32 packet_num = 2 [default = 1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->packet_num(), target);
  }
  
  // required uint32 number_of_packets = 3 [default = 1];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number_of_packets(), target);
  }
  
  // required string type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }
  
  // required string publisher = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->publisher(), target);
  }
  
  // required string host = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // required string topic = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->topic(), target);
  }
  
  // required string timestamp = 8 [default = ""];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timestamp(), target);
  }
  
  // required uint32 timeout = 9 [default = 1000];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 message_num = 1;
    if (has_message_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_num());
    }
    
    // required uint32 packet_num = 2 [default = 1];
    if (has_packet_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_num());
    }
    
    // required uint32 number_of_packets = 3 [default = 1];
    if (has_number_of_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_packets());
    }
    
    // required string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required string publisher = 5;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // required string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string topic = 7;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // required string timestamp = 8 [default = ""];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 timeout = 9 [default = 1000];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkHeader::MergeFrom(const NetworkHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_message_num(from.message_num());
    }
    if (from._has_bit(1)) {
      set_packet_num(from.packet_num());
    }
    if (from._has_bit(2)) {
      set_number_of_packets(from.number_of_packets());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_publisher(from.publisher());
    }
    if (from._has_bit(5)) {
      set_host(from.host());
    }
    if (from._has_bit(6)) {
      set_topic(from.topic());
    }
    if (from._has_bit(7)) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkHeader::CopyFrom(const NetworkHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void NetworkHeader::Swap(NetworkHeader* other) {
  if (other != this) {
    std::swap(message_num_, other->message_num_);
    std::swap(packet_num_, other->packet_num_);
    std::swap(number_of_packets_, other->number_of_packets_);
    std::swap(type_, other->type_);
    std::swap(publisher_, other->publisher_);
    std::swap(host_, other->host_);
    std::swap(topic_, other->topic_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkHeader_descriptor_;
  metadata.reflection = NetworkHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkPacket::kHeaderFieldNumber;
const int NetworkPacket::kByteBufferFieldNumber;
#endif  // !_MSC_VER

NetworkPacket::NetworkPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkPacket::InitAsDefaultInstance() {
  header_ = const_cast< ::NetworkHeader*>(&::NetworkHeader::default_instance());
  byte_buffer_ = const_cast< ::RawBytes*>(&::RawBytes::default_instance());
}

NetworkPacket::NetworkPacket(const NetworkPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkPacket::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  byte_buffer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkPacket::~NetworkPacket() {
  SharedDtor();
}

void NetworkPacket::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete byte_buffer_;
  }
}

void NetworkPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkPacket_descriptor_;
}

const NetworkPacket& NetworkPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetworkPacket_2eproto();  return *default_instance_;
}

NetworkPacket* NetworkPacket::default_instance_ = NULL;

NetworkPacket* NetworkPacket::New() const {
  return new NetworkPacket;
}

void NetworkPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (header_ != NULL) header_->::NetworkHeader::Clear();
    }
    if (_has_bit(1)) {
      if (byte_buffer_ != NULL) byte_buffer_->::RawBytes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetworkHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_byte_buffer;
        break;
      }
      
      // required .RawBytes byte_buffer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_byte_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_byte_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NetworkHeader header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required .RawBytes byte_buffer = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->byte_buffer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NetworkHeader header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required .RawBytes byte_buffer = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->byte_buffer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NetworkHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required .RawBytes byte_buffer = 2;
    if (has_byte_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->byte_buffer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkPacket::MergeFrom(const NetworkPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_header()->::NetworkHeader::MergeFrom(from.header());
    }
    if (from._has_bit(1)) {
      mutable_byte_buffer()->::RawBytes::MergeFrom(from.byte_buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkPacket::CopyFrom(const NetworkPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_byte_buffer()) {
    if (!this->byte_buffer().IsInitialized()) return false;
  }
  return true;
}

void NetworkPacket::Swap(NetworkPacket* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(byte_buffer_, other->byte_buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkPacket_descriptor_;
  metadata.reflection = NetworkPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
